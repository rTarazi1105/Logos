Syntax

DEFINITION				DATA TYPE
var name : <Statement>			value
func name x,y : <Statement>		value as "name(x,y)"
/ func name x,y = <Value>		/ function as "name"
statement name : <Statement>		statement
predicate name x,y : <Statement>	statement
set name x,y : <Statement>		Set
op name A,B,C : <Statement>		operation
property name f,g,h N : <Statement>	statement
		// each function must have N args

Notes:
x,y,z stand for values
A,B,C stand for statements
f,g,h stand for functions
N stands for a number


KEYWORDS AND SUGAR
and					operation
or					operation
true					statement
false					statement
"abc"					statement
=					statement::equal
∃x					statement::exists
//					comment


CODE ACTIONS
mod Name {			// module
	assume <bool> statement	// set statement.truth=bool
	X = check statement	// print statement.truth
	print X
	X = identity a b	// for any a and b of the same type
				// eg checks if "A and B" == "A and B"
}

INTERNAL TYPES
Statement enum 
- custom(" ")
- equal(value,value)
- exists(variable or function)		∃
	// for a function f(x) = y, it means:
		∃x,y: f(x) = y			
- property(variable or function)
	// can use functions as arguments in statements
	// e.g. injective, surjective
- not(statement)
- junc(statements..., bool)
	junc(s...,true) = and(s...)
		(Reason: You can remove a "True" from a conjunction)
		junc([],true) = True
	junc(s...,false) = or(s...)
		junc([],false) = False

Variable or function = Relation[k] where k is the number of arguments

Value enum
- output(values..., variable or function)
	// 0 values for variable
	// 1+ values for function
- argument
	// e.g. x in f(x)

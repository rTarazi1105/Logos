Syntax

DEFINITION				DATA TYPE
var name : <Statement>			value
func name x,y : <Statement>		value as "name(x,y)"
/ func name x,y = <Value>		/ function as "name"
statement name : <Statement>		statement
predicate name x,y : <Statement>	statement
op name A,B,C : <Statement>		operation
property name f,g,h N : <Statement>	statement
		// each function must have N args

Notes:
x,y,z stand for values
A,B,C stand for statements
f,g,h stand for functions
N stands for a number


KEYWORDS AND SUGAR
and					operation
or					operation
true					statement
false					statement
"abc"					statement
=					statement::equal
∃x					statement::exists
//					comment


CODE ACTIONS
basic types: bool, Int, str
// module
mod Name(b: bool, i: mut Int) -> bool {	// "module"
	assume statement		// set statement.truth=true
	X = statement.truth
	print X
}
CONTROL FLOW
- if <bool> <action>
- actions can be enclosed in {}
- "for" and "match" like Rust
- return <output type>
- generators

PACKAGES
"import basics" loads it
but you still have to write "basics::abc"
unless you do "use basics"


INTERNAL TYPES
Statement enum 
- custom(" ")
- equal(value,value)
- exists(variable or function)		∃
	// for a function f(x) = y, it means:
		∃x,y: f(x) = y			
- property(variable or function)
	// can use functions as arguments in statements
	// e.g. injective, surjective
- not(statement)
- conjunc(statements...)
	empty = True
- disjunc(statements...)
	empty = False

Variable or function = Relation[k] where k is the number of arguments

Value enum
- output(values..., variable or function)
	// 0 values for variable
	// 1+ values for function
- argument
	// e.g. x in f(x)

operation ifthen : P,Q : not P or Q; 

struct Contradiction {} // comment

// Treating a boolean array as a binary number, add 1
mod add(list: mut [bool;]) -> bool {
	i = 0;
	while list.i != none do
		if args.i == false then {
			args.i = true;
			return false;
		} else {
			args.i = false;
			i++;
		};
	return true;
}

mod identity(operation1: op, operation2: op) -> bool {
	n = operation1.args.len;
	if n != operation2.args.len then return false;
	
	args = [false; n];
	while !add(mut args) do {
		if operation1(args) != operation2(args) then return false;
	};
	return true;
}


struct Set { relation<1> }
mod Set.contains(self, v: value) -> statement {
	return self.0[v];
}

mod Set.universal() -> Set {
	relation universal : x : true;
	return Set { universal };
}

Logos {
	Program = Section+
	Section
		= DataDeclLine
		| StructDecl
		| EnumDecl
		| ClassDecl
		| MethodDecl
		| ModDecl
		| ClassImpl
	comment = "//" notNewLine*
	notNewLine = ~("\n" | "\r") any
	space += comment
		
		
	Statement
		= Equality
		| FilledInfix
		| FilledOperation
		| FilledRelationOrProp
		| Negation
		| bool
		| DataVar
		| string
		| ParenStatement
	ParenStatement = "(" Statement ")"
	Negation = "not" Statement
	
	FilledOperation = DataVar "[" ListOf<Statement, ","> "]"
	
	FilledRelationOrProp = DataVar "[" ListOf<DataVar, ","> "]"
	
	FilledInfix = Statement Infix Statement				// only works on binary operations
	
	Equality = DataVar "=" DataVar
	
	Infix
		= defaultInfix
		| id1
	defaultInfix
		= "and"					// and
		| "or"					// or
		| "<=>"					// if and only if
		| "<="					// backwards if
		| "=>"					// if
	
	DataDeclLine = DataDecl ";"
	DataDecl
		= ValueDecl
		| RelationDecl
		| OperationDecl
		| InfixDecl
		| PropertyDecl
		| StatementDecl
		| Assume
		
	ValueDecl = "value" id1 (":" DataVar)?
	RelationDecl = id1 ":" ListOf<id1, ","> ":" Statement
	OperationDecl = operationWord id1 ":" ListOf<id1, ","> ":" Statement
	InfixDecl = "infix" id1 DataVar
	PropertyDecl = propertyWord id1 ":" ListOf<ArgRelation, ","> ":" Statement
	ArgRelation = id1 Numbering
	StatementDecl = id1 ":" Statement
	Assume = "assume" id1? bool ":" Statement
	
	Numbering = "<" number ">"
	
	StructDecl = "struct" id2 "{" ListOf<Param, ","> "}" 
	EnumDecl = "enum" id2 "{" ListOf<Param, ","> "}"
	Param = (id1 ":")? FullType				// if no id: let it be 0,1 etc
	
	ModDecl = "mod" id1 ModHead ModBody
	ModHead = "(" ListOf<ModParamWithSelf, ","> ")" ReturnType?
	
	MethodDecl = "mod" CustomType "." id1 ModHead ModBody
	
	ModParamWithSelf = ModParam | SelfParam
	SelfParam = mut? "self"
	ModParam = id1 ":" FullType
	
	ClassDecl = "class" id2 ColonSuperClass? ClassBody
	ColonSuperClass = ":" SuperClass
	SuperClass = CustomType ("+" CustomType)*
	ClassBody = "{" ClassMod* "}"
	ClassMod = "mod" id1 ModHead ModBodyOrColon
	ModBodyOrColon = ModBody | ";"
	
	ClassImpl = CustomType "impl" CustomType ClassBody
	
	ReturnType = "->" FullType
	
	FullType = mut? BasicType // mut is just &
	BasicType
		= defaultType
		| NumberedRelation
		| NumberedOperation
		| NumberedProperty
		| ArrayType
		| SuperClass
	
	defaultType
		= "value"
		| "statement"
		| "bool"
		| "int"
		| "string"
		| selfType
		| noneType
	operationWord = "operation" | "op"
	propertyWord = "property" | "prop"
	
	NumberedRelation = "relation" Numbering?
	NumberedOperation = operationWord Numbering?
	NumberedProperty = propertyWord MultiNumbering?
	MultiNumbering = "<" ListOf<number, ","> ">"
	
	ArrayType = "[" FullType (";" number)? "]"
	
	ModBody = "{" ActionLine* "}"
	ActionLine = Action ";"
	Action
		= ModBody
		| DataDecl
		| Assignment
		| Crement
		| Return
		| ControlFlow
		| BreakLine
		| ContinueLine
		| MethodCall
		| ModCall
	MethodCall = VarOrType "." id1 Call
	VarOrType = Variable | CustomType
	ModCall = id1 Call
	Call = "(" ListOf<Expr, ","> ")"
	
	// Cannot assign to modcall or varfield directly
	// (unless we required a keyword like "let" to initialize)
	// because we'd rep the assignee and it'd create an error if undefined
	// But you can do x = mut thing.field; x = expr;
	// And you can do thing.field++;
	Assignment = AssignedVariable "=" Expr
	Expr = mut? Readable
	Readable 
		= Construct 
		| Literal 
		| ControlFlow 
		| Variable 
		| EvalBool 
		| LogosArray 
		| ModBody
	Construct = CustomType "{" ListOf<Expr, ","> "}"
	Crement = Variable change
	change = "++" | "--"
	
	BreakLine = break+
	ContinueLine = continue+
	
	Return = returnOrYield DegreeUp? Expr?
	returnOrYield = "return" | "yield"
	DegreeUp = "." number
	
	EvalBool
		= And
		| Or
		| Not
		| bool
		| InEqualities
		| Variable		// will need to add statement.truth
		| ParenEvalBool
	ParenEvalBool = "(" EvalBool ")"
	And = EvalBool "&" EvalBool
	Or = EvalBool "|" EvalBool
	Not = "!" EvalBool
		
	InEqualities = Expr InEqual Expr
	InEqual = "<" | ">" | "==" | "!=" | ">=" | "=<" 
	
	ControlFlow = IfFlow | MatchFlow | ForFlow | WhileFlow
	IfFlow = if EvalBool then Action ElseFlow?
	ElseFlow = else Action
	ForFlow = for id1 in Collection do Action
	Collection = LogosArray | Variable
	WhileFlow = while EvalBool do Action
	MatchFlow = match Variable ":" ListOf<MatchLine, ",">
	MatchLine = ListOf<MatchStart, "+"> "=>" Action
	MatchStart
		= FullType
		| IfEvalBool
	IfEvalBool = if EvalBool
	
	LogosArray						// range will be built-in. Count(int), Range(int, int).
		= FullArray
		| CopiedArray
	FullArray = "[" ListOf<Expr, ","> ArrayNumber? "]"
	CopiedArray = "[" Expr ArrayNumber? "]"
	ArrayNumber = ";" Int
	Int
		= number
		| Variable
	
	Variable
		= MethodCall
		| VarField
		| ModCall
		| AssignedVariable
	VarField = Variable "." Field				// field, list index, enum case
	
	Literal
		= bool
		| number
		| none
		| string
	string = "\"" char* "\""
	char = ~"\"" any
	bool = true | false
	
	number = digit+
	id1 = ~keyword idletter idchar*				// variables, modules etc; must be lowercase
	id2 = ~keyword upper idchar*				// types must be capitalized
	idchar = alnum | "_"
	idletter = ~upper letter | "_"
	keyword = key " " // ~alnum
	key
		= bool
		| mut
		| defaultType
		| defaultInfix
		| returnOrYield
		| none
		| "infix"
		| "struct"
		| "enum"
		| "method"
		| "mod"
		| "class"
		| "impl"
		| "and"
		| "or"
		| if
		| then
		| else
		| for
		| in
		| do
		| while
		| "not"
		| break
		| continue
		| "len" // on Collection OR relation or op's args
		| "lens" // prop's args' numbers
		| "drop"
		| "copy"
		| "truth" // field on statement
		| "type" // mod(Any)
		| "rel" // method on value: lists all relations
		| "get" // method on Collection
		| "read" // mod(mutref)
		| "name" // field on value
		| selfType
		| noneType
		| anyClass
		| errorClass
		| comparableClass
		| equatableClass
		| collectionClass
		| addClass
	
	DataVar = Variable	// Can be a variable only if in mod
	
	CustomType = id2			// struct, enum or class
	AssignedVariable = id1
	Field = id1 | number
	
	mut = "mut"
	none = "none"
	true = "true"
	false = "false"
	match = "match"
	if = "if"
	then = "then"
	else = "else"
	while = "while"
	for = "for"
	in = "in"
	do = "do"
	break = "break"
	continue = "continue"
	selfType = "Self"
	noneType = "None"
	anyClass = "Any"
	errorClass = "Error"
	comparableClass = "Comparable"
	equatableClass = "Equatable"
	collectionClass = "Collection"
	addClass = "Add" // for strings, numbers or lists
}

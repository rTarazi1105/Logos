Logos {
	Program = Section+
	Section
		= DataDeclLine
		| StructDecl
		| EnumDecl
		| ClassDecl
		| MethodDecl
		| ModDecl
		| ClassImpl
	comment = "//" notNewLine*
	notNewLine = ~("\n" | "\r") any
	space += comment
		
		
	Statement
		= Bool
		| Equality
		| FilledInfix
		| FilledRelation
		| FilledOperation
		| FilledProperty
		| Negation
		| DeclaredStatement
		| ParenStatement
	ParenStatement = "(" Statement ")"
	Negation = "not" Statement
	FilledRelation = Relation "[" ListOf<Value, ","> "]"
	FilledOperation = Operation "[" ListOf<Statement, ","> "]"
	FilledInfix = Statement Infix Statement				// only works on binary operations
	FilledProperty = Property "[" ListOf<Relation, ","> "]"
	Equality = Value "=" Value
	
	Infix
		= "and"							// and
		| "or"							// or
		| "=="							// equals for statements
		| UserDefinedInfix
	
	DataDeclLine = DataDecl ";"
	DataDecl
		= ValueDecl
		| RelationDecl
		| OperationDecl
		| InfixDecl
		| PropertyDecl
		| StatementDecl
		| Assume
		
	ValueDecl = "value" id1 (":" Relation)?
	RelationDecl = id1 ":" ListOf<ArgValue, ","> ":" Statement
	ArgValue = id1
	OperationDecl = OperationWord id2 ":" ListOf<ArgStatement, ","> ":" Statement
	ArgStatement = id1
	InfixDecl = "infix" id2 Operation
	PropertyDecl = PropertyWord id1 ":" ListOf<ArgRelation, ","> ":" Statement
	ArgRelation = id1 Numbering
	StatementDecl = id1 ":" Statement
	Assume = "assume" id1? Bool ":" Statement
	
	Numbering = "<" number ">"
	
	StructDecl = "struct" id2 TypeParam? SuperClass? "{" ListOf<Param, ","> "}" 
	EnumDecl = "enum" id2 TypeParam? "{" ListOf<Param, ","> "}"
	
	ModDecl = "mod" id2 ModHead ModBody
	ModHead = TypeParam? "(" ListOf<ModParam, ","> ")" ReturnType?
	// OptModParams = ListOf<ModParam, ",">
	
	MethodDecl = "mod" (Struct | Class) "." id2 MethodHead ModBody
	MethodHead = TypeParam? "(" ListOf<ModParamWithSelf, ","> ")" ReturnType?
	ModParamWithSelf = ModParam | SelfParam
	
	ReturnType = "->" Mutable? ValidType
	
	ClassDecl = "class" id2 TypeParam? SuperClass? ClassBody
	SuperClass = ":" ListOf<ClassInclError, ",">
	ClassInclError = Class | "Error"
	ClassBody = "{" ClassLine* "}"
	ClassLine
		= ClassField
		| ClassMod
	ClassField = Param ","
	ClassMod = "mod" id2 MethodHead ModBodyOrColon
	ModBodyOrColon = ModBody | ";"
	
	ClassImpl = ValidType "impl" Class ClassImplBody
	ClassImplBody = "{" ClassImplLine* "}"
	ClassImplLine
		= ClassImplField
		| ClassMod
	ClassImplField = id2 ParamMap? ","
	ParamMap = ":" id2
	
	TypeParam = ("<" ListOf<IdAndSuperClass, ","> ">")		// no superclass = Any
	IdAndSuperClass = id2 SuperClass?
	FilledTypeParam = ("<" ListOf<ValidType, ","> ">")
	
	Param = (id2 ":")? ValidType				// if no id: let it be 0,1 etc
	SelfParam = Mutable? "self"
	ModParam = id2 ":" Mutable? ValidType
	Mutable = "mut"
	
	ValidType
		= "Self"
		| "None"
		| DefaultValidType
		| NumberedRelation
		| CollectionType
		| ClassMaybeWithTypeParam
		| Struct
		| Enum
	ClassMaybeWithTypeParam = Class FilledTypeParam?
	NumberedRelation = "relation" Numbering?
	DefaultValidType
		= "value"
		| "statement"
		| OperationWord
		| PropertyWord
		| "bool"
		| "int"
		| "Error"
	OperationWord = "op " | "operation "
	PropertyWord = "prop " | "property "
	CollectionType
		= TupleType
		| ArrayType
	TupleType = "[" ListOf<ValidType, ","> "]"
	ArrayType = "[" ValidType ";" number? "]"
	
	ModBody = "{" ActionLine* "}"
	ActionLine = Action ";"
	Action
		= ModBody
		| DataDecl
		| Assignment
		| Increment | Decrement
		| Return
		| ControlFlow
		| "break"
		| "continue"
		| MethodCall
		| ModCall
	MethodCall = Variable "." Method Call
	ModCall = Mod Call
	Call = "(" ListOf<Readable, ","> ")"
	
	Assignment = Variable "=" Readable
	Readable = Construct | Literal | ControlFlow | Array | Variable
	Construct = Struct "{" ListOf<Readable, ","> "}"
	Increment = Variable "++"
	Decrement = Variable "--"
	
	Return = ReturnOrYield ReturnUp? Readable?
	ReturnOrYield = "return" | "yield"
	ReturnUp = DotNumber | DotDot
	DotNumber = "." number
	DotDot = ".."
	
	EvalBool
		= And
		| Or
		| Not
		| Bool
		| InEqualities
		| Variable						// will need to add statement.truth
	And = EvalBool1 "&" EvalBool2
	Or = EvalBool1 "|" EvalBool2
	Not = "!" EvalBool
	EvalBool1 = EvalBool
	EvalBool2 = EvalBool
		
	InEqualities = Readable InEqual Readable
	InEqual = "<" | ">" | "==" | "!="
	
	ControlFlow = IfFlow | MatchFlow | ForFlow | WhileFlow
	IfFlow = "if" EvalBool "then" Action Else?
	Else = "else" Action
	ForFlow = "for" Arg "in" Collection "do" Action
	Arg = id2
	Collection = Array | Variable
	WhileFlow = "while" EvalBool "do" Action
	MatchFlow = "match" Variable ":" ListOf<MatchLine, ",">
	MatchLine = MatchStart "=>" Action
	MatchStart
		= ValidType
		| IfEvalBool
	IfEvalBool = "if" EvalBool
	
	Array						// range will be built-in. Count(int), Range(int, int).
		= FullArray
		| CopiedArray
	FullArray = "[" ListOf<Readable, ","> "]"
	CopiedArray = "[" Readable ";" Int "]"
	Int
		= number
		| Variable
	
	Variable
		= MethodCall
		| VarField
		| ModCall
		| AssignedVariable
	VarField = Variable "." Field				// field, list index, enum case
	
	Literal
		= Bool
		| number
		| "none"
		| String
	String = "\"" char* "\""
	char = ~"\"" any
	Bool = "true" | "false"
	
	number = digit+
	id1 = ~keyword idchar+					// for data in the header
	id2 = ~keyword idletter idchar*				// for types and variables in body
	idchar = alnum | "_"
	idletter = letter | "_"
	dot = "."
	keyword = key " "
	key
		= "true" | "false"
		| "mut"
		| "none" | "None"
		| "value"
		| "statement"
		| "operation" | "op"
		| "property" | "prop"
		| "bool"
		| "int"
		| "Error"
		| "relation"
		| "infix"
		| "struct"
		| "enum"
		| "method"
		| "mod"
		| "if"
		| "then"
		| "else"
		| "for"
		| "in"
		| "do"
		| "or"
		| "and"
		| "not"
		| "break"
		| "continue"
	//	| "len"
		| "class"
		| "impl"
		
	DeclaredStatement = Variable | id1
	Relation = Variable | id1
	Operation = Variable | id2
	UserDefinedInfix = id2
	Property = Variable | id1
	Value = Variable | id1
	Struct = id2
	Class = id2
	Method = id2
	Mod = id2
	Enum = id2
	AssignedVariable = id2
	Field = id2 | number
}

Logos {
	Literal
		= Bool
		| Int
		| "\"" char* "\""
	char = ~"\"" any
	Bool = "true" | "false"
	Int
		= number
		| Variable
		
		
	Statement
		= Bool
		| "(" Statement ")"
		| "not" Statement
		| Relation "[" ListOf<Value, ","> "]"
		| Operation "[" ListOf<Statement, ","> "]"
		| Statement1 Infix Statement2				-- only works on binary operations
		| Property "[" ListOf<Relation, ","> "]"
		| DeclaredStatement
		| Value1 "=" Value2
	Statement1 = Statement
	Statement2 = Statement
	Value1 = Value
	Value2 = Value
	
	Infix
		= "&&"							-- and
		| "||"							-- or
		| "=="							-- equals for statements
		| UserDefinedInfix
	
	
	Program = Section+
	Section
		= DataDecl ";"
		| StructDecl
		| EnumDecl
		| ClassDecl
		| MethodDecl
		| ModDecl
		| ClassImpl
		| ClassOfClassDecl
		
	DataDecl
		= ValueDecl
		| RelationDecl
		| OperationDecl
		| InfixDecl
		| PropertyDecl
		| StatementDecl
		| Assume
		| Assumption
		
	ValueDecl = "value" id1 (":" Relation)?
	RelationDecl = id1 ":" ListOf<ArgValue, ","> ":" Statement
	ArgValue = id1
	OperationDecl = "operation" id1 ":" ListOf<ArgStatement, ","> ":" Statement
	ArgStatement = id1
	InfixDecl = "infix" id1 Operation
	PropertyDecl = "property" id1 ":" ListOf<ArgRelation, ","> ":" Statement
	ArgRelation = id1 Numbering
	StatementDecl = id1 ":" Statement
	Assume = Statement Bool
	Assumption = "assume" id1 ":" Assume
	
	Numbering = "<" number ">"
	
	StructDecl = "struct" id2 TypeParam? SuperClass? "{" ListOf<Param, ","> "}" 
	EnumDecl = "enum" id2 TypeParam? "{" ListOf<Param, ","> "}"
	
	ModDecl = "mod" id2 TypeParam? "(" ListOf<ModParam, ",">? ")" ReturnType? ModBody
	
	MethodDecl = "mod" (Struct | Class) "." id2 TypeParam? "(" ListOf<ModParam | SelfParam, ",">? ")" ReturnType? ModBody
	
	ReturnType = "->" (Mutable? ValidType | "none")
	
	ClassDecl = "class" id2 TypeParam? SuperClass? ClassBody
	SuperClass = ":" ListOf<Class | "Error", ",">
	ClassBody = "{" ClassLine* "}"
	ClassLine
		= Param ";"
		| "mod" MethodHead
	ClassImpl = ValidType "impl" Class ClassBody
	
	TypeParam = ("<" ListOf<id2 SuperClass?, ","> ">")	-- no superclass --> Any
	FilledTypeParam = ("<" ListOf<ValidType, ","> ">")
	
	Param = (id2 ":")? ValidType				-- if no id: let it be 0,1 etc
	SelfParam = Mutable? "self"
	ModParam = Mutable? ParamWithOptionalType
	Mutable = "mut"
	
	ValidType
		= DefaultValidType
		| Struct
		| Class FilledTypeParam?
		| Enum
		| CollectionType
	DefaultValidType = 
		= "value"
		| "statement"
		| "operation"
		| "property"
		| "bool"
		| "int"
		| "relation" Numbering?
		| "Error"
	CollectionType
		= "[" ListOf<ValidType, ","> "]"
		| "[" ValidType ";" number "]"
		| "[" ValidType "]"
	
	ModBody = "{" ListOf<Action, ";">? "}"
	Action
		= ModBody
		| DataDecl
		| Assignment
		| Increment | Decrement
		| Return
		| ControlFlow
		| "break"
		| "continue"
		| MethodCall
		| Mod Call
	MethodCall = Variable "." Method Call
	Call = "(" ListOf<Readable, ",">? ")"
	
	Assignment = id2 "=" Readable
	Readable = Literal | Variable | ControlFlow
	Increment = Variable "++"
	Decrement = Variable "--"
	
	Return = ("return" | "yield") ReturnUp? Variable?
	ReturnUp = "." number | ".."
	
	EvalBool
		= EvalBool1 "or" EvalBool2
		| EvalBool1 "and" EvalBool2
		| "!" EvalBool
		| Bool
		| LessThan | GreaterThan
		| EqualTo | Unequal
		| Variable						-- will need to add statement.truth
	EvalBool1 = EvalBool
	EvalBool2 = EvalBool
		
	LessThan = Comparable "<" Comparable
	GreaterThan = Comparable ">" Comparable
	EqualTo = Equatable "==" Equatable
	Unequal = Equatable "!=" Equatable
	
	ControlFlow = IfFlow | MatchFlow | Loop
	Loop = WhileFlow | ForFlow
	IfFlow = "if" EvalBool "then" Action Else?
	Else = "else" Action
	ForFlow = "for" Arg "in" Collection "do" Action
	Arg = ~Variable
	WhileFlow = "while" EvalBool "do" Action
	MatchFlow = "match" Variable ":" ListOf<MatchLine, ",">
	MatchLine = MatchStart "=>" Action
	MatchStart
		= ValidType
		| "none"
		| "if" EvalBool
	
	Comparable
		= Int
		| Variable					-- can be a variable that's not int
	Equatable
		= Comparable
		| EvalBool
		| "none"
		| Variable
	
	Collection						-- range will be built-in. Count(int), Range(int, int).
		= "[" ListOf<Variable, ","> "]"
		| "[" Variable ";" Int "]"
		| Loop						-- with "yield"
		| Variable
	
	Variable
		= AssignedVariable
		| Variable "." Field
		| Variable "." number				-- unnamed field, or list index
		| Collection "." number
		| MethodCall
		| Mod Call
	
	number = digit+
	id1 = ~keyword alnum					-- for data in the header
	id2 = ~keyword letter alnum*				-- for types and variables in body
	dot = "."
	keyword
		= Bool
		| Mutable
		| DefaultValidType
		| "infix"
		| "struct"
		| "enum"
		| "method"
		| "mod"
		| "if"
		| "then"
		| "else"
		| "for"
		| "in"
		| "do"
		| "or"
		| "and"
		| "not"
		| "none"
		| "break"
		| "continue"
		| "len"
}

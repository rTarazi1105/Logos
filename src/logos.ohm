Logos {
	Bool = "true" | "false"
	Int
		= number
		| Variable
	Statement
		= Bool
		| "(" Statement ")"
		| FilledEquality
		| FilledRelation
		| FilledOperation
		| FilledProperty
		| DeclaredStatement
	
	FilledEquality
		= Value "=" Value
	
	FilledRelation
		= Relation "[" ListOf<Value, ","> "]"
	
	FilledOperation
		= Operation "[" ListOf<Statement, ","> "]"
		| Statement Infix Statement				-- only works on binary operations
	
	FilledProperty
		= Property "[" ListOf<Relation, ","> "]"
	
	
	Program = Section+
	Section
		= DataDecl ";"
		| StructDecl
		| EnumDecl
		| ClassDecl
		| MethodDecl
		| ModDecl
		| ClassImpl
		
	DataDecl
		= ValueDecl
		| RelationDecl
		| OperationDecl
		| InfixDecl
		| PropertyDecl
		| StatementDecl
		| Assume
		
	ValueDecl = "value" id ":" Relation						-- must be relation<1>
	RelationDecl = id ":" ListOf<ArgValue, ","> ":" Statement
	ArgValue = id
	OperationDecl = "operation" id ":" ListOf<ArgStatement, ","> ":" Statement
	ArgStatement = id
	InfixDecl = "infix" id Operation
	PropertyDecl = "property" id ":" ListOf<ArgRelation, ","> ":" Statement
	ArgRelation = id Numbering
	StatementDecl = id ":" Statement
	Assume = Statement Bool
	
	Numbering = "<" number ">"
	
	StructDecl = "struct" id SuperClass? "{" ListOf<Param, ","> "}" 
	EnumDecl = "enum" id "{" ListOf<Param, ","> "}"
	MethodDecl = "method" (Struct | Class) "." MethodHead ModBody
	ModDecl = "mod" ModHead ModBody
	ModHead = id "(" ListOf<ModParam, ",">? ")" ReturnType?
	MethodHead = id "(" ListOf<ModParam | SelfParam, ",">? ")" ReturnType?
	ReturnType = "->" ValidType
	
	ClassDecl = "class" id SuperClass? ClassBody
	SuperClass = ":" ListOf<Class, ",">
	ClassBody = "{" ClassLine* "}"
	ClassLine
		= Assignment ";"
		| ModDecl
	ClassImpl = ValidType "impl" Class ClassBody
	
	Param = id ":" ValidType
	SelfParam = Mutable? "self"
	ModParam = Mutable? id ":" ValidType
	Mutable = "mut"
	ValidType
		= DefaultValidType
		| Struct
		| Class
		| Enum
		| CollectionType
	DefaultValidType = 
		= "value"
		| "statement"
		| "operation"
		| "property"
		| "bool"
		| "int"
		| "relation" Numbering?
		| "error"
	CollectionType
		= "[" ListOf<ValidType, ","> "]"
		| "[" ValidType ";" number "]"
		| "[" ValidType "]"
	
	ModBody = "{" ListOf<Action, ";"> "}"
	Action
		= ModBody
		| DataDecl
		| Assignment
		| Increment | Decrement
		| Return
		| IfFlow
		| ForFlow
		| MatchFlow
		| "break"
		| "continue"
		| MethodCall
		| Mod Call
	MethodCall = Variable "." Method Call
	Call = "(" ListOf<Variable, ",">? ")"
	
	Assignment = id "=" Variable | IfFlow | ForFlow | MatchFlow
	Increment = Variable "++"
	Decrement = Variable "--"
	
	Return = ("return" | "yield") ReturnUp? Variable?
	ReturnUp = "." number | ".."
	
	EvalBool
		= Bool
		| LessThan
		| GreaterThan
		| EqualTo
		| Variable
		| Or
		| And
	LessThan = Comparable "<" Comparable
	GreaterThan = Comparable ">" Comparable
	EqualTo = Equatable "==" Equatable
	Or = EvalBool "or" Or
	And = EvalBool "and" And
	
	IfFlow = "if" EvalBool "then" Action Else?
	Else = "else" Action
	ForFlow = "for" Arg "in" Collection "do" Action
	Arg = ~Variable
	MatchFlow = "match" Variable ":" ListOf<MatchLine, ",">
	MatchLine = MatchStart "=>" Action
	MatchStart
		= ValidType
		| none
		| "if" EvalBool
	
	Comparable
		= Int
		| Variable					-- can be a variable that's not int
	Equatable
		= Comparable
		| EvalBool
		| "none"
		| Variable
	
	Collection						-- range will be built-in
		= "[" ListOf<Variable, ","> "]"
		| "[" Variable ";" Int "]"
		| Variable
	
	Variable
		= AssignedVariable
		| Variable "." Field
		| Collection "." number
		| MethodCall
		| Mod Call
	
	number = digit+
	id = ~keyword alnum
	dot = "."
	keyword
		= Bool
		| Mutable
		| DefaultValidType
		| "infix"
		| "struct"
		| "enum"
		| "method"
		| "mod"
		| "if"
		| "then"
		| "else"
		| "for"
		| "in"
		| "do"
		| "or"
		| "and"
		| "break"
		| "continue"
		| "len"
}
